# –í —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –Ω–∞–±—Ä–∞—Ç—å pytest
# import pytest
# from main import is_message_ready_to_parse, \
#     get_cars_count, \
#     get_cars_count_by_word, \
#     get_valid_data, \
#     find_range_value

import re
from processor import get_valid_data, get_cars_count

FAKES = [
    '–ù–∞ —É—Å–ø–µ–Ω–∫–µ –≤ —Å—Ç–æ—Ä–æ–Ω—É –†–§ —Å—Ç–æ–∏–º —Å 7 —á–∞—Å–æ–≤ —É—Ç—Ä–∞, —Ç–æ–ª—å–∫–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –î–ù–†, –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ—á—Ç–∏ –Ω–µ—Ç.',
    '40 –º–∏–Ω—É—Ç —Å—Ç–æ–∏–º –Ω–∞ –ö—É–π–±—ã—à–µ–≤–æ –≤ —Å—Ç–æ—Ä–æ–Ω—É –î–ù–†, –Ω–∏ –æ–¥–Ω–æ–π –º–∞—à–∏–Ω—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏',
    '–¢–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–æ—à–ª–∏ –î–ù–†-–†–§ –æ–±–µ –≥—Ä–∞–Ω–∏—Ü—ã –∑–∞ 1 —á–∞—Å –Ω–∞ –ù–æ–≤–æ–∞–∑–æ–≤—Å–∫–µ',
    '–£—Å–ø–µ–Ω–∫–∞ –†–§- –î–ù–† 2 —á–∞—Å–∞ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏.',
    '–ú–∞—Ä–∏–Ω–æ–≤–∫–∞ –¥–Ω—Ä-—Ä—Ñ –ø—Ä–æ—à–µ–ª –∑–∞ 15 –º–∏–Ω—É—Ç –≤—Å–µ',
]

ZERO_CARS = [
    '–†–§ –≤ —Å—Ç–æ—Ä–æ–Ω—É –º–∞—Ä–∏–Ω–æ–≤–∫–∏ –Ω–∏–∫–æ–≥–æ',
    '–í–æ–∑–Ω–µ—Å–µ–Ω–∫–∞ –≤ –î–ù–† –ø—É—Å—Ç–æ',
]

MSGS_WORDS = [
    '–ù–æ–≤–æ–∞–∑–æ–≤—Å–∫ –∏–∑ –†–§ –ø–µ—Ä–µ–¥ –∑–∞–µ–∑–¥–æ–º –ø–∞—Ä–∞ –º–∞—à–∏–Ω',
]

GOOD_MSG = [
    '–ö—É—Ä–≥–∞–Ω 10 –ø–µ—Ä–µ–¥ –ø–∞–ª–∫–æ–π',
    '–ù–æ–≤–æ–∞–∑–æ–≤—Å–∫ –†–§ –î–ù–† 15 –º–∞—à–∏–Ω',
]

MSGS_WITH_RANGES = [
    '–ù–æ–≤–æ–∞–∑–æ–≤—Å–∫ –¥–Ω—Ä- –†–§ –ø–µ—Ä–µ–¥ –ø–∞–ª–∫–æ–π –ø–æ—Ä—è–¥–∫–∞ 20-25 –∞–≤—Ç–æ',
    '–ú–∞—Ä–∏–Ω–æ–≤–∫–∞ –∏–∑ –î–ù–† –≤ –†–§ 8-10 –º–∞—à–∏–Ω –¥–æ —à–ª–∞–≥–±–∞—É–º–∞ ,–Ω–∞ –Ω–µ–π—Ç—Ä–∞–ª–∫–µ  —Å—Ç–æ–ª—å–∫–æ –∂–µ',
]


# def test_fakes():
#     for fake_msg in FAKES:
#         assert not is_message_ready_to_parse(fake_msg)
#
#
# def test_zero_cars():
#     for zero_msg in ZERO_CARS:
#         assert not get_cars_count(zero_msg)
#
#
# def test_words_cars_counts():
#     for msg in MSGS_WORDS:
#         assert get_cars_count_by_word(msg) is not None
#
#
# def test_parsed_ok():
#     for msg in GOOD_MSG:
#         assert get_valid_data(msg) is not None


def assertion(result, way, is_cars_zero, car_type=0):
    assert result is not None
    assert result['way'] == way
    assert result['kpp_name']
    if is_cars_zero:
        assert result['cars_num'] == 0
    else:
        assert result['cars_num'] > 0
    assert result['car_type'] == car_type
    assert result['comment']


def test_case_0001():
    msg = '–¢—Ä–∏ —ç–∫–∏–ø–∞–∂–∞ –¥–ø—Å –ü–æ—Å–ª–µ –∫–æ–ª—å—Ü–∞ –∫—É—Ä–≥–∞–Ω–∞'
    result = get_valid_data(msg)
    assert result is None


def test_case_0002():
    msg = '–£—Å–ø–µ–Ω–∫–∞ –î–ù–† –†–§ 13 –º–∞—à–∏–Ω'
    result = get_valid_data(msg)
    assertion(result, 'to_rf', False)


def test_case_0003():
    msg = '–ù–æ–≤–æ–∞–∑–æ–≤—Å–∫ –î–ù–†-–†–§, –ø–µ—Ä–µ–¥ —à–ª–∞–≥–±–∞—É–º–æ–º 15 –º–∞—à–∏–Ω'
    result = get_valid_data(msg)
    assertion(result, 'to_rf', False)


def test_case_0004():
    msg = '–ú—ã —ç—Ç–æ —Å–¥–µ–ª–∞–ª–∏!) –í—Å–µ–≥–æ 9 —á–∞—Å–æ–≤ –æ–∂–∏–¥–∞–Ω–∏—è, –∏ –º—ã –ø—Ä–æ–µ—Ö–∞–ª–∏. P.S. –ù–æ–≤–æ–∞–∑–æ–≤—Å–∫ –∏–∑ –î–ù–† –≤ –†–§'
    result = get_valid_data(msg)
    assert result is None


def test_case_0005():
    msg = '–£—Å–ø–µ–Ω–∫–∞ –≤ –î–ù–† –ø—É—Å—Ç–æ, –Ω–∞ –Ω–µ–π—Ç—Ä–∞–ª–∫–µ 2.'
    result = get_valid_data(msg)
    assertion(result, 'to_dnr', True)


def test_case_0006():
    msg = '–ù–æ–≤–æ–∞–∑–æ–≤—Å–∫. –î–Ω—Ä -> –†–§. –ò–∑ –î–Ω—Ä –Ω–∏–∫–æ–≥–æ. –ù–µ–π—Ç—Ä–∞–ª–∫–∞ –ø–µ—Ä–µ–¥ –†–§ –º–∞—à–∏–Ω 25-30'
    result = get_valid_data(msg)
    assertion(result, 'to_rf', True)


def test_case_0007():
    msg = '–ú–∞—Ä–∏–Ω–æ—á–∫–∞ –ø–µ—Ä–µ–¥ –ø–∞–ª–∫–æ–π —Ç—Ä–∏ –∞–≤—Ç–æ –∏–∑ –†–§ –≤ –î–ù–† üñêÔ∏èüñêÔ∏èüòÇüñêÔ∏èüñêÔ∏è'
    result = get_valid_data(msg)
    assertion(result, 'to_dnr', False)


def test_case_0008():
    msg = '–ï—Ö–∞–ª–∏ —á–µ—Ä–µ–∑ –£—Å–ø–µ–Ω–∫—É –≤ –î–æ–Ω–µ—Ü–∫ 14 –∞–≤–≥—É—Å—Ç–∞. –ü–æ –æ—à–∏–±–∫–µ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –Ω–∞ –¥–æ—Å–º–æ—Ç—Ä–µ –≤–∑—è–ª–∏ —á—É–∂–æ–π –ø–∞–∫–µ—Ç —Å –≤–µ—â–∞–º–∏. –í–¥—Ä—É–≥ –∑–¥–µ—Å—Ç—å –µ—Å—Ç—å –≤–ª–∞–¥–µ–ª–µ—Ü –ø–∞–∫–µ—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–∫—É.'
    result = get_valid_data(msg)
    assert result is None


def test_case_0009():
    msg = '–ù–∞ –º–∞—Ä–∏–Ω–æ–≤–∫–µ —á—Ç–æ –Ω–µ—Ç –Ω–∏–∫–æ–≥–æ –≤ –†–§ –æ—Ç–∑–æ–≤–∏—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–∫–æ–ª—å–∫–æ –º–∞—à–∏–Ω'
    result = get_valid_data(msg)
    assert result is None


def test_case_0010():
    msg = '–£—Å–ø–µ–Ω–∫–∞ –≤ —Ä—Ñ7 –º–∞—à–∏–ΩÔ∏è'
    result = get_valid_data(msg)
    assertion(result, 'to_rf', False)


def test_case_0011():
    msg = '–£—Å–ø–µ–Ω–∫–∞ –≤ –†–§ –ø–∞–ª–∫–∞11.'
    result = get_valid_data(msg)
    assertion(result, 'to_rf', False)


def test_case_0012():
    msg = '–ù–æ–≤–æ–∞–∑–æ–≤—Å–∫ –î–ù–†-–†–§ —Å—Ä–∞–∑—É –Ω–∞ –≤—ä–µ–∑–¥. –î–ù–† –ø—Ä–æ—à–ª–∏ –∑–∞ 10 –º–∏–Ω. –ù–∞ –Ω–µ–π—Ç—Ä–∞–ª–∫–µ 4 –º–∞—à–∏–Ω—ã'
    result = get_valid_data(msg)
    assertion(result, 'to_rf', True)


def test_case_0013():
    msg = '–ù–æ–≤–æ–∞–∑–æ–≤—Å–∫. –î–ù–†-–†–§ –Ω–æ–ª—å –ø–æ–ª–Ω—ã–π. –î–≤–∏–∂–µ–Ω–∏–µ —Å–ª–∞–±–æ–µ –æ—á–µ–Ω—å.'
    result = get_valid_data(msg)
    assert result is None


def test_case_0014():
    msg = '–£—Å–ø–µ–Ω–∫–∞ –¥–Ω—Ä -—Ä—Ñ 52 –Ω–æ–ª—å –∑–∞–±–∏—Ç'
    result = get_valid_data(msg)
    assertion(result, 'to_rf', False)


def test_case_0015():
    msg = '–ú–∞—Ä–∏–Ω–æ–≤–∫–∞ –∏–∑ –î–æ–Ω–µ—Ü–∫–∞ ...–ø—Ä.35 –∞–≤—Ç–æ.'
    result = get_valid_data(msg)
    assertion(result, 'to_rf', False)


def test_case_0016():
    msg = '–£—Å–ø–µ–Ω–∫–∞ —ã –†–§ 18 –ª–µ–≥–∫–æ–≤—ã—Ö. –§—É—Ä—ã –∑–∞ –º–æ—Å—Ç'
    result = get_valid_data(msg)
    assertion(result, 'to_rf', False)


def test_case_0017():
    msg = '–£—Å–ø–µ–Ω–∫–∞ –†–§-–¥–Ω—Ä –∂–æ–ø–∞... –î–æ –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã, —Å—Ç–æ–∏–º...'
    result = get_valid_data(msg)
    assertion(result, 'to_dnr', False)


def test_case_0018():
    msg = '–ù–æ–≤–æ–∞–∑–æ–≤—Å–∫, –≤ —Å–µ—Ä–æ–π –∑–æ–Ω–µ –≤ –†–§, –º–∞—à–∏–Ω 20-25'
    result = get_valid_data(msg)
    assert result is None


def test_case_0019():
    msg = '–ö—É—Ä–≥–∞–Ω –¥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞ –∏ 3 –∞–≤—Ç–æ–±—É—Å–∞'
    result = get_valid_data(msg)
    assertion(result, 'to_dnr', False)


def test_case_0020():
    msg = '–ú–∞—Ä–∏–Ω–æ–≤–∫–∞ -–ö—É–π–±—ã—à–µ–≤–æ –¥–æ –∫—É—Å—Ç–∞ –ª–µ–≥–∫–æ–≤—ã–µ.'
    result = get_valid_data(msg)
    assertion(result, 'to_rf', False)


def test_case_0021():
    msg = '–ö—É–π–±—ã—à–µ–≤–æ –±—É—Ñ–µ—Ä –≤ –†—Ñ –ø—É—Å—Ç–æ'
    result = get_valid_data(msg)
    assertion(result, 'to_dnr', True)


def test_case_0022():
    msg = '–ù–æ–≤–æ–∞–∑–æ–≤—Å–∫. –†–§-–î–ù–† —Å–≤–æ–±–æ–¥–Ω–æ'
    result = get_valid_data(msg)
    assertion(result, 'to_dnr', True)


def test_case_0023():
    msg = '–ú–∞—Ä–∏–Ω–æ–≤–∫–∞ –≤ –†–§ –≤–∏–∂—É 23 –ª–µ–≥–∫–æ–≤—ã—Ö,–æ–¥–Ω–∞ –≥—Ä—É–∑–æ–≤–∞—è'
    result = get_valid_data(msg)
    assertion(result, 'to_rf', False)


def test_case_0024():
    msg = '–ù–æ–≤–æ–∞–∑–æ–≤—Å–∫: –∏–∑ –†–§ –≤ –î–ù–† - 4 –Ω–∞ –≤—ä–µ–∑–¥, 1 —Ñ—É—Ä–∞'
    result = get_valid_data(msg)
    # assertion(result, 'to_dnr', False)
    assert result is None


def test_case_0025():
    msg = '–£—Å–ø–µ–Ω–∫–∞ –≤ –†–§ —Å–µ—Ä–µ–¥–∏–Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–∞ –∑–∞–ø—Ä–∞–≤–∫–∏.–§—É—Ä—ã –¥–∞–ª–µ–∫–æ –∑–∞ –º–æ—Å—Ç.'
    result = get_valid_data(msg)
    assertion(result, 'to_rf', False, 1)


def test_case_0026():
    msg = '–ù–æ–≤–æ–∞–∑–æ–≤—Å–∫ –ø–µ—Ä–µ–¥ –ø–∞–ª–∫–æ–π 0, –Ω–∞ —Å–µ—Ä–æ–π –º–∞—à–∏–Ω 30, –∏ –†–§ –∑–∞–±–∏—Ç–∞.'
    result = get_valid_data(msg)
    assertion(result, 'to_rf', True)


def test_case_0027():
    msg = '–ö—É—Ä–≥–∞–Ω –ø–∞–ª–∫–∞ 0 –Ω–∞–≤–µ—Å 20'
    result = get_valid_data(msg)
    assertion(result, 'to_dnr', True)


def test_case_0028():
    msg = '–ù–∞ –£—Å–ø–µ–Ω–∫–µ –∏–∑ –†–§ –≤ –î–ù–†: –Ω–∞ –≤—ä–µ–∑–¥ 0, –ø–æ–¥ –Ω–∞–≤–µ—Å–æ–º 10'
    result = get_valid_data(msg)
    assertion(result, 'to_dnr', True)


def test_case_0029():
    msg = '–ù–æ–≤–æ–∞–∑–æ–≤—Å–∫ –≤ –†–§ –∏–∑ –î–Ω—Ä 25 –º–∞—à–∏–Ω.–∏ –ø–æ–¥ –Ω–∞–≤–µ—Å–æ–º –µ—Å—Ç—å.'
    result = get_valid_data(msg)
    assertion(result, 'to_rf', False)


def test_case_0030():
    msg = '–ù–æ–≤–æ–∞–∑–æ–≤—Å–∫ —É–∂–µ –º–∞—à–∏–Ω 70 –∏–∑ –î–ù–† –≤ –†–§..; –ü–∞—Ä–∞–¥–æ–∫—Å!!)); –£–±—Ä–∞–ª–∏ –∫–æ–º–º–µ–Ω–¥–∞–Ω—Ç—Å–∫–∏–π —á–∞—Å, —Å–µ–≥–æ–¥–Ω—è –¥–∞–∂–µ –ª–∏—à–Ω–∏–π ' \
          '–¥–µ–Ω—å –±–µ–∑ –∫–æ–º–º–µ–Ω–¥—ã —Å–¥–µ–ª–∞–ª–∏, —á—Ç–æ–±—ã –ª—é–¥–∏ –ø–æ—Ä–∞–Ω—å—à–µ –∏ –±–µ–∑–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–µ–Ω–Ω–æ —Ç–∏–ø–∞ –µ—Ö–∞–ª–∏ –Ω–∞ –≤—ã–±–æ—Ä—ã, –∞ –Ω–∞ —Ç–∞–º–æ–∂–Ω—è—Ö ' \
          '–ø–æ–ø–∞!!!..; –ü–æ–ª—á–∞—Å–∞ —É–∂–µ —Å—Ç–æ–∏–º —Ç—É–ø–æ –±–µ–∑ –¥–≤–∏–∂–µ–Ω–∏—è!..; –≠—Ç–æ –∫–∞–∫ –≤–æ–æ–±—â–µ??üòÑüòÜü§£; –ì–¥–µ –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ ' \
          '–ø—Ä–æ—Å–ª–µ–¥–∏—Ç—å –∑–∞ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π?)); –ê –ø–æ—Ç–æ–º —Å–∫–∞–∂—É—Ç, —á—Ç–æ –∏–∑ –î–ù–† –∏–∑ –ø–æ–ª—É—á–∏–≤—à–∏—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ —Ñ–∏–≥–∞ ' \
          '–∫—Ç–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª!!!..'
    result = get_valid_data(msg)
    # assertion(result, 'to_rf', False)
    assert result is None


def test_case_0031():
    msg = '–ú–∞—Ä–∏–Ω–æ–≤–∫–∞ –Ω–æ–ª—å –±–∏—Ç–∫–æ–º'
    result = get_valid_data(msg)
    assert result is None


def test_case_0032():
    msg = '–ú–∞—Ä–∏–Ω–æ–≤–∫–∞-–ø—Ä–æ—à–ª–∏ –∑–∞ 40 –º–∏–Ω –æ–±–µ –≥—Ä–∞–Ω–∏—Ü—ã ,–≤—Å–µ —Å–ø–æ–∫–æ–π–Ω–æ —ë–∂–∏–∫'
    result = get_valid_data(msg)
    assert result is None


def test_case_0033():
    msg = '–£—Å–ø–µ–Ω–∫–∞. –ò–∑ –î–ù–† –≤ –†–§ - 25-30, –Ω–µ–π—Ç—Ä–∞–ª–∫–∞ –∑–∞–±–∏—Ç–∞ –≤ 2 —Ä—è–¥–∞'
    result = get_valid_data(msg)
    assertion(result, 'to_rf', False)


def test_case_0034():
    msg = '–ü—Ä–æ–µ–∑–¥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π , –ù–æ–≤–æ–∞–∑–æ–≤—Å–∫-—Ä—Ñ –±—É—Ñ–µ—Ä –ø—É—Å—Ç–æ–π'
    result = get_valid_data(msg)
    assert result is None


def test_case_0035():
    msg = '–£—Å–ø–µ–Ω–∫–∞ –ù–∞ —É–ø—Ä–æ—â–µ–Ω–∫–µ –≤ –†–§ —Å—Ç–æ–∏–º –≤ —Ä–∞–π–æ–Ω–µ —á–∞—Å–∞, –∏ –µ—â–µ –≥–¥–µ-—Ç–æ –º–∏–Ω—É—Ç 20. –ò–∑ –†–§ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–æ–ª—å–∫–æ –∂–µ'
    result = get_valid_data(msg)
    assert result is None


def test_case_0036():
    msg = '–ü–µ—Ä–µ–¥ —à–ª–∞–≥–±–∞—É–º–æ–º –ø—É—Å—Ç–æ, –Ω–µ–π—Ç—Ä–∞–ª—å –Ω–∏–∫–æ–≥–æ. –ú–∞—Ä–∏–Ω–æ–≤–∫–∞ –∏–∑ –†–æ—Å—Å–∏–∏.'
    result = get_valid_data(msg)
    assertion(result, 'to_dnr', True)


def test_case_0037():
    msg = '–ù–∞ –ú–∞—Ä–∏–Ω–æ–≤–∫–µ –≤ –†–§ –º–∞—à–∏–Ω 50. –î–≤–∏–∂–µ–Ω–∏–µ –∏–¥—ë—Ç, –Ω–æ –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ! –°—Ç–æ–∏–º 3 —á–∞—Å–∞ –∏ –µ—â—ë –º–∞—à–∏–Ω 15 —Å–ø–µ—Ä–µ–¥–∏.'
    result = get_valid_data(msg)
    assertion(result, 'to_rf', False)


def test_case_0038():
    msg = '–ò–∑ –î–æ–Ω–µ—Ü–∫–∞ –≤ –¢–∞–≥–∞–Ω—Ä–æ–≥ —á–µ—Ä–µ–∑ –ù–æ–≤–æ–∞–∑–æ–≤—Å–∫ 2—á20 –º–∏–Ω—É—Ç'
    result = get_valid_data(msg)
    assert result is None


def test_case_0039():
    msg = '–ú–∞—Ä–∏–Ω–æ–≤–∫–∞ –≤ –†–§ 23 –¥–æ —à–ª–∞–≥–±–∞—É–º–∞. –ù–∞–≤–µ—Å 5.'
    result = get_valid_data(msg)
    assert result is None


def test_case_0040():
    msg = '–ò–∑ –†–§ –≤ –î–ù–† –£—Å–ø–µ–Ω–∫–∞ 12 –º–∞—à–∏–Ω –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ'
    result = get_valid_data(msg)
    assert result is None


def test_case_0041():
    msg = '–ö—É—Ä–≥–∞–Ω –ø–∞–ª–∫–∞ –Ω–æ–ª—å, –Ω–∞–≤–µ—Å 20 '
    result = get_valid_data(msg)
    assertion(result, 'to_dnr', True)


def test_case_0042():
    msg = '–£—Å–ø–µ–Ω–∫–∞ –≤ —Å—Ç–æ—Ä–æ–Ω—É –¥–Ω—Ä, –ø–µ—Ä–µ–¥ —à–ª–∞–≥–±–∞—É–º–æ–º –Ω–∏–∫–æ–≥–æ. –ü–µ—Ä–µ–¥ –Ω–∞–≤–µ—Å–æ–º 2 —Ä—è–¥–∞ –ø–æ 10 –º–∞—à–∏–Ω'
    result = get_valid_data(msg)
    assertion(result, 'to_dnr', True)


def test_case_0043():
    msg = '1,5 —á–∞—Å–∞ –æ–±–µ —Ç–∞–º–æ–∂–Ω–∏ –≤ —Å—Ç–æ—Ä–æ–Ω—É –î–ù–† –£—Å–ø–µ–Ω–∫–∞'
    result = get_valid_data(msg)
    assert result is None


def test_case_0044():
    msg = '–ò–∑ –†–§ –≤ –î–ù–† –ù–æ–≤–æ–∞–∑–æ–≤—Å–∫ –≥—Ä—É–∑–æ–≤—ã—Ö —à—Ç—É–∫ 100. –î–ù–† –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç'
    result = get_valid_data(msg)
    assertion(result, 'to_dnr', False, 1)


def test_case_0045():
    msg = '–ö—É–π–±—ã—à–µ–≤–æ –¥–æ–º–æ–π –≥—Ä—É–∑–æ–≤—ã—Ö –æ–∫–æ–ª–æ 30'
    result = get_valid_data(msg)
    assertion(result, 'to_dnr', False, 1)


def test_case_0046():
    msg = '–£—Å–ø–µ–Ω–∫–∞ —Å –†–§ - –¥–æ –∑–∞–ø—Ä–∞–≤–∫–∏. –°—Ç–æ–∏–º –≥–ª—É—Ö–æ. –ì—Ä—É–∑–æ–≤—ã—Ö 120 –Ω–∞—Å—á–∏—Ç–∞–ª–∏.'
    result = get_valid_data(msg)
    assertion(result, 'to_dnr', False, 1)


def test_case_0047():
    msg = '–£—Å–ø–µ–Ω–∫–∞ –≥—Ä—É–∑–æ–≤—ã–µ –∏–∑ –†–§ –≤ –î–ù–† –¥–æ —à–ª–∞–≥–±–∞—É–º–∞ –Ω–µ –º–µ–Ω–µ–µ 150 –º–∞—à–∏–Ω'
    result = get_valid_data(msg)
    assertion(result, 'to_dnr', False, 1)


def test_case_0048():
    msg = '–ö—Ç–æ –∑–Ω–∞–µ—Ç, –ø–æ—á–µ–º—É –Ω–∞ –ù–æ–≤–æ–∞–∑–æ–≤—Å–∫–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–∞–º–æ–∂–µ–Ω–Ω–∏–∫–∏ –Ω–∞ –≤—ä–µ–∑–¥ –≥—Ä—É–∑–æ–≤—ã—Ö? –û—á–µ—Ä–µ–¥—å –≥—Ä—É–∑–æ–≤—ã—Ö –Ω–∞ –≤—ä–µ–∑–¥ 3 –∫–º. –° —á–µ–º —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ?'
    result = get_valid_data(msg)
    assert result is None


def test_case_0049():
    msg = '–£—Å–ø–µ–Ω–∫–∞ —Ä—Ñ-–¥–Ω—Ä 10 –º–∞—à–∏–Ω –∑–∞ –ø–æ–≤–æ—Ä–æ—Ç–æ–º'
    result = get_valid_data(msg)
    print(result)
    assert result['cars_num'] > 30


def test_case_0050():
    msg = '–£—Å–ø–µ–Ω–∫–∞ –≤ –†–§ —à–ª–∞–≥–±–∞—É–º 0, –Ω–∞–≤–µ—Å 11, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –≤ 2 —Ä—á–¥–∞'
    result = get_valid_data(msg)
    assertion(result, 'to_rf', True)


def test_case_0051():
    msg = '–£—Å–ø–µ–Ω–∫–∞. –ò–∑ –†–§ –≤ –î–ù–†. –õ–µ–≥–∫–æ–≤—ã—Ö - 0, –≥—Ä—É–∑–æ–≤—ã—Ö - 104'
    result = get_valid_data(msg)
    assertion(result, 'to_dnr', True)


def test_case_0052():
    msg = '–í 3.30 –Ω–∞ –£—Å–ø–µ–Ω–∫–µ –±—ã–ª–æ –ø—É—Å—Ç–æ, –ø–∏—à—É—Ç. –ê –≤–µ—á–µ—Ä–æ–º –ø–æ–ª–Ω–æ. –í—Å—ë –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –≤ –æ–¥–∏–Ω –º–æ–º–µ–Ω—Ç'
    result = get_valid_data(msg)
    assert result is None


def test_case_0053():
    msg = '–£—Å–ø–µ–Ω–∫–∞ —Ç–∞–∂–µ –∏—Å—Ç–æ—Ä–∏—è, 2 —á–∞—Å–∞ –≤ —Ç–∞–º–æ–∂–Ω–µ. –ü—Ä–æ–¥–≤–∏–Ω—É–ª–∏—Å—å –Ω–∞ 3 –∫—É–∑–æ–≤–∞.'
    result = get_valid_data(msg)
    assert result is None


def test_case_0054():
    msg = '–ù–æ–≤–æ–∞–∑–æ–≤—Å–∫ –≤ –†–§ –ø–∞–ª–∫–∞ 20 0/5 –º–∞—à.'
    result = get_valid_data(msg)
    assertion(result, 'to_rf', False)


def test_case_0055():
    msg = '–í—ã–µ–∑–¥ –∏–∑ –î–ù–† –≤ –†–§ —á–µ—Ä–µ–∑ —É—Å–ø–µ–Ω–∫—É. –û—á–µ—Ä–µ–¥—å –ø—Ä–∏–º–µ—Ä–Ω–æ —á–∞—Å–∞ –Ω–∞ 4'
    result = get_valid_data(msg)
    assert result is None


def test_case_0056():
    msg = '–ò—â—É 1 –º–µ—Å—Ç–æ —Å–µ–≥–æ–¥–Ω—è –Ω–æ—á—å—é –¥–ª—è –º—É–∂–∞ —Å –ú–µ–ª–æ–≤–æ–≥–æ –¥–æ –î–æ–Ω–µ—Ü–∫–∞ –∏–ª–∏ –¥–æ –£—Å–ø–µ–Ω–∫–∏. –ü–∏—à–∏—Ç–µ –≤ –ª—Å.'
    result = get_valid_data(msg)
    assert result is None


def test_case_0057():
    msg = '–ù–æ–≤–æ–∞–∑–æ–≤—Å–∫ –†–§-–¥–Ω—Ä –Ω–∞ –º–∞—à–∏–Ω –¥–æ  –ø–æ–≤–æ—Ä–æ—Ç–∞ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—É'
    result = get_valid_data(msg)
    assertion(result, 'to_dnr', False)


def test_case_0058():
    msg = '–ù–æ–≤–æ–∞–∑–æ–≤—Å–∫:–î–ù–† -> –†–§ - 15 –º–∞—à–∏–Ω–ú–Ω–æ–≥–æ —Ñ—É—Ä.'
    result = get_valid_data(msg)
    assertion(result, 'to_rf', False)


def test_case_0059():
    msg = '–ù–∞ —É—Å–ø–µ–Ω–∫–µ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –†–æ—Å—Å–∏–∏ –∞–≤—Ç–æ —à—Ç—É–∫ 60'
    result = get_valid_data(msg)
    assertion(result, 'to_dnr', False)


def test_case_0060():
    msg = '–£—Å–ø–µ–Ω–∫–∞ –≤ –†–§- 0 –∑–∞–±–∏—Ç'
    result = get_valid_data(msg)
    assert result is None


def run_tests():

    test_case_0060()
    # test_case_0059()
    # test_case_0058()
    # test_case_0057()
    # test_case_0056()
    # test_case_0055()
    # test_case_0054()
    # test_case_0053()
    # test_case_0052()
    # test_case_0051()
    # test_case_0050()
    # test_case_0049()
    # test_case_0048()
    # test_case_0047()
    # test_case_0045()
    # test_case_0046()
    # test_case_0044()
    # test_case_0043()
    # test_case_0042()
    # test_case_0041()
    # test_case_0040()
    # test_case_0039()
    # test_case_0038()
    # test_case_0036()
    # test_case_0035()
    # test_case_0034()
    # test_case_0033()
    # test_case_0032()
    # test_case_0031()
    # test_case_0030()
    # test_case_0029()
    # test_case_0028()
    # test_case_0027()
    # test_case_0026()
    # test_case_0025()
    # test_case_0024()
    # test_case_0023()
    # test_case_0022()
    # test_case_0021()
    # test_case_0020()
    # test_case_0019()
    # test_case_0018()
    # test_case_0017()
    # test_case_0016()
    # test_case_0015()
    # test_case_0014()
    # test_case_0013()
    # test_case_0012()
    # test_case_0011()
    # test_case_0010()
    # test_case_0009()
    # test_case_0008()
    # test_case_0007()
    # test_case_0006()
    # test_case_0005()
    # test_case_0004()
    # test_case_0003()
    # test_case_0002()
    # test_case_0001()

    print('\n ***ALL TESTS FINISHED***')

    # test_case_0037()  # –ú–Ω–æ–≥–æ —Ü–∏—Ñ—Ä

"""
–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ:
—Å–ª–∏—à–∫–æ–º –∑–∞–ø—É—Ç–∞–Ω–æ:
 
 –ù–æ–≤–æ–∞–∑–æ–≤—Å–∫. –†—Ñ- –î–ù–† –Ω–∏–∫–æ–≥–æ. –î–Ω—Ä- –†–§ –Ω–∏–∫–æ–≥–æ, –≤ –ø—Ä–æ–º–∑–æ–Ω–µ –º–∞—à–∏–Ω 10-15


–ò–Ω—Ñ—ã –Ω–µ—Ç, –Ω–æ –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞

 7	0	–ú–∞—Ä–∏–Ω–æ–≤–∫–∞ –∏–∑ —Ä—Ñ –≤ –¥–Ω—Ä –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–æ, –≤—Å–µ–≥–æ 5 –º–∞—à–∏–Ω —á–∞—Å —Å—Ç–æ–∏–º —Å–º–µ–Ω–∞ –¥—ã–±–∏–ª–æ–≤ !

 
"""